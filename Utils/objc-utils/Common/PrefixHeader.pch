//
//  PrefixHeader.pch
//  Utils
//
//  Created by Xian Mo on 2020/8/27.
//  Copyright Â© 2020 Mo. All rights reserved.
//

#ifndef PrefixHeader_pch
#define PrefixHeader_pch

#import <UIKit/UIKit.h>


// define
#define NSLog(fmt, ...) NSLog((@"%s [Line %d] " fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__)



// gcd
#define BACK_SYNC(block) dispatch_sync(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), block)
#define BACK(block) dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), block)
#define MAIN(block) dispatch_async(dispatch_get_main_queue(),block)

// UI
#define SCREEN_WIDTH            ([UIScreen mainScreen].bounds.size.width)
#define SCREEN_HEIGHT           ([UIScreen mainScreen].bounds.size.height)
#define STATUS_BAR_HEIGHT       ([UIApplication sharedApplication].statusBarFrame.size.height)

// adaptive
#define MScale                  (375.0 / SCREEN_WIDTH)
#define MSafeTop                ([[UIApplication sharedApplication] statusBarFrame].size.height)
#define MSafeBottom \
^{if (@available(iOS 11.0, *)) {\
return (CGFloat)[UIApplication sharedApplication].delegate.window.safeAreaInsets.bottom;\
} else {\
return (CGFloat)0.f;\
}}()\



// font
#define FONT(S)  [UIFont fontWithName:@"PingFangSC-Regular" size:S]
#define FONTThin(S)  [UIFont fontWithName:@"PingFangSC-Thin" size:S]
#define FONTBold(S) [UIFont fontWithName:@"PingFangSC-Semibold" size:S]
#define FONTMedium(S) [UIFont fontWithName:@"PingFangSC-Medium" size:S]
#define FONTAequilate(S) [UIFont fontWithName:@"ArialMT" size:S]

// stackview
#define StackFixed(w, h) \
^{\
    UIView *view = UIView.new;\
    [view mas_makeConstraints:^(MASConstraintMaker *make) {\
        make.width.mas_equalTo(w);\
        make.height.mas_equalTo(h);\
    }];\
    return view;\
}()

#define StackSpring(axis) \
^{\
    UIView *view = UIView.new; \
    [view mas_makeConstraints:^(MASConstraintMaker *make) {\
        if (axis == UILayoutConstraintAxisHorizontal) {\
            make.width.mas_equalTo(1000).priorityLow();\
        } else {\
            make.height.mas_equalTo(1000).priorityLow();\
        }\
    }];\
    return view;\
}()


// runtime
#define ASSOCIATED_OBJ(getter, setter, type, ...) \
- (type)getter {\
return [objc_getAssociatedObject(self, _cmd) type##Value];\
}\
\
- (void)setter:(type)getter {\
objc_setAssociatedObject(self, @selector(getter), [NSValue valueWith##type:getter], OBJC_ASSOCIATION_RETAIN_NONATOMIC);\
__VA_ARGS__;\
}

//weakSelf
#ifndef weakify
    #if DEBUG
        #if __has_feature(objc_arc)
        #define weakify(object) autoreleasepool{} __weak __typeof__(object) weak##_##object = object;
        #else
        #define weakify(object) autoreleasepool{} __block __typeof__(object) block##_##object = object;
        #endif
    #else
        #if __has_feature(objc_arc)
        #define weakify(object) try{} @finally{} {} __weak __typeof__(object) weak##_##object = object;
        #else
        #define weakify(object) try{} @finally{} {} __block __typeof__(object) block##_##object = object;
        #endif
    #endif
#endif

#ifndef strongify
    #if DEBUG
        #if __has_feature(objc_arc)
        #define strongify(object) autoreleasepool{} __typeof__(object) object = weak##_##object;
        #else
        #define strongify(object) autoreleasepool{} __typeof__(object) object = block##_##object;
        #endif
    #else
        #if __has_feature(objc_arc)
        #define strongify(object) try{} @finally{} __typeof__(object) object = weak##_##object;
        #else
        #define strongify(object) try{} @finally{} __typeof__(object) object = block##_##object;
        #endif
    #endif
#endif

#endif /* PrefixHeader_pch */
